我所做的工作
2021 年 2 月
在上大学之前，除了上学之外，我主要投入精力在写作和编程这两件事上。我没有写长篇论文。那时我写的都是初学者应该写的那种东西，或许现在依然如此：短篇小说。我的小说糟糕透顶。它们几乎没有情节，只是有着强烈情感的角色，我想这使得它们显得深刻。
我最初尝试编写的程序是基于 IBM 1401 这款计算机编写的，当时我们所在的学区使用它来进行所谓的“数据处理”。那是我在九年级的时候的事了，那时我大概 13 或 14 岁。我们学区的那台 1401 计算机恰好位于我们初中学校的地下室里，我和我的朋友里奇·德拉夫斯（Rich Draves）得到了使用它的许可。在那里就像置身于一个迷你版的邦德反派巢穴一般，所有的机器——中央处理器（CPU）、磁盘驱动器、打印机、卡片读取器——都安放在一个高高的地板上，在明亮的荧光灯下闪闪发光。
我们使用的语言是早期版本的 FORTRAN 语言。当时你得把程序输入到打孔卡片上，然后把卡片堆叠起来放进读卡机，再按下一个按钮将程序加载到内存中并运行它。通常情况下，运行的结果就是会在那台声音震耳欲聋的打印机上打印出一些东西。
我对 1401 计算机感到困惑不已。我弄不明白该如何处理它。回想起来，对于它我确实也没什么办法可想。它唯一的输入形式是存储在穿孔卡片上的数据，而我根本就没有存储过任何数据到穿孔卡片上。另一个选择就是去做那些不需要任何输入的事情，比如计算圆周率的近似值，但我当时的数学知识还不足以做出任何有趣的事情。所以我不奇怪自己记不起自己编写的任何程序了，因为它们肯定没什么用处。我印象最清晰的时刻是当我得知程序有可能不会终止的时候，而我的一个程序却没能做到这一点。在没有分时系统的机器上，这既是一个技术错误也是一个社会错误，正如数据中心经理的表情所表明的那样。
在这个没有分时系统的机器上，这既是一个技术错误也是一个社会错误，正如数据中心经理的表情所表明的那样。
有了微型计算机，一切都发生了变化。如今，一台计算机可以就摆在你面前的桌子上，它在运行时能够响应你的按键操作，而不是只是处理一堆穿孔卡片然后就停止工作了。[1]
我的几位朋友中，第一个拥有微型计算机的是他自己动手组装的。这台电脑是希思克公司（Heathkit）以套件形式出售的。我清楚地记得，看着他坐在电脑前，直接在电脑上输入程序的情景，当时我既感到钦佩又心生羡慕。
在那个年代，电脑价格昂贵，我花了好几年的时间才终于说服父亲给我买了一台电脑，那是一台 TRS-80 型号的电脑，大概是在 1980 年左右买的。当时的标准配置是苹果 II 型号的电脑，但一台 TRS-80 也足够用了。那时候我才真正开始接触编程。我编写了一些简单的游戏、一个用来预测我的模型火箭能飞多高的程序，还有一个文字处理器，父亲用它至少写了一本书。内存里能容纳的文字页面数量只有大约两页，所以他每次会写两页，然后打印出来，但比起打字机来说，这已经好多了。

注：TRS-80 是当时一款流行的微型计算机品牌，苹果 II 是当时苹果公司的一款经典电脑型号。原文中提到的 TRS-80 和苹果 II 是当时流行的电脑品牌，但请注意，TRS-80 是美国电子公司（Tandy Corporation）的品牌，而苹果 II 是苹果公司（Apple Inc.）的品牌。在翻译时，为了保持准确性，原文中的品牌名称保持不变。
虽然我喜欢编程，但我当时并未打算在大学里学习这门课程。在大学里，我打算学习哲学，这听起来要强大得多。在我看来，那时懵懂无知的高中生觉得，哲学是对终极真理的研究，相比之下，其他学科所研究的东西不过是领域内的知识而已。当我进入大学后才发现，其他学科占据了太多的思想空间，留给哲学的所谓终极真理的空间所剩无几。哲学剩下的内容似乎只是那些在其他领域人们觉得可以放心忽略的边缘情况。
在我 18 岁的时候，我根本无法用言语表达出这种想法。当时我只知道，自己一直在修读哲学课程，可这些课程总是枯燥乏味的。所以我就决定转攻人工智能这个领域。
20 世纪 80 年代中期，人工智能的概念已经深入人心，但有两个因素特别让我想要投身于这方面的工作：一是海因莱因（Robert A. Heinlein）的一部小说《月亮是严酷的主人》（The Moon is a Harsh Mistress），其中有一个名为迈克（Mike）的智能计算机；二是美国公共广播公司（PBS）的一部纪录片，展示了特里·温诺格拉德（Terry Winograd）使用 SHRDLU（一种语言理解系统）。我没有重读过《月亮是严酷的主人》，所以不清楚这部作品是否还能经得起时间的考验，但当我读到它时，完全沉浸在其构建的世界之中。似乎只要我们能教 SHRDLU 更多的词汇，就能拥有迈克这样的智能计算机了，而当我看到温诺格拉德使用 SHRDLU 时，觉得实现这一目标的时间最多也就几年而已。所需要做的就是教 SHRDLU 更多的词汇。
当时康奈尔大学里根本没有人工智能相关的课程，甚至连研究生课程都没有，所以我只能自己摸索着学习。这意味着我得学习 LISP 语言，因为在那个时候，LISP 被认为是人工智能领域的标准语言。当时常用的编程语言都相当原始，程序员们的思维模式也相应地比较落后。康奈尔大学默认使用的编程语言是一种类似 Pascal 的语言叫 PL/I，其他地方的情况也差不多。学习 LISP 让我对程序的概念有了飞速的拓展，直到多年以后我才开始意识到新的限制究竟在哪里。这更符合我的预期；这才是大学教育该有的效果。